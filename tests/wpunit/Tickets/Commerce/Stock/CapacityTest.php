<?php

namespace Tribe\Tickets\Commerce;

use TEC\Tickets\Commerce\Module;
use TEC\Tickets\Commerce\Provider;
use TEC\Tickets\Commerce\Order;
use TEC\Tickets\Commerce\Cart;
use TEC\Tickets\Commerce\Gateways\PayPal\Gateway;
use TEC\Tickets\Commerce\Status\Pending;
use Tribe\Tickets\Test\Commerce\TicketsCommerce\Ticket_Maker;
use Tribe\Events\Test\Factories\Event;
use \Tribe__Tickets__Main as Tickets_Plugin;

class CapacityTest extends \Codeception\TestCase\WPTestCase {

	use Ticket_Maker;

	/**
	 * @inheritDoc
	 */
	public static function setUpBeforeClass() {
		parent::setUpBeforeClass();

//		codecept_debug('setting up befor class');
//
////		define( 'TEC_TICKETS_COMMERCE', true );
//		tribe_update_option( 'tickets_commerce_enabled', true );
//		putenv('TEC_TICKETS_COMMERCE=1');
////		tribe_register_provider( Provider::class );
////
//		add_filter( 'tribe_tickets_ticket_object_is_ticket_cache_enabled', '__return_false' );
	}


	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		codecept_debug('setting up before');

//		define( 'TEC_TICKETS_COMMERCE', true );
//		tribe_update_option( 'tickets_commerce_enabled', true );
		putenv('TEC_TICKETS_COMMERCE=1');

//		codecept_debug( 'tec commerce should be 1: ' );
//
//		codecept_debug( intval( tec_tickets_commerce_is_enabled() ) );

		tribe_register_provider( Provider::class );
//
		add_filter( 'tribe_tickets_ticket_object_is_ticket_cache_enabled', '__return_false' );
	}

	public function tearDown() {
		parent::tearDown();

		codecept_debug('teardown after');
		putenv( 'TEC_TICKETS_COMMERCE' );
//		tribe_update_option( 'tickets_commerce_enabled', false );

//		codecept_debug( 'tec commerce should be 0: ' );
//		codecept_debug( intval( tec_tickets_commerce_is_enabled() ) );

//		\Tribe__Container::init()->offsetUnset( Provider::class );
	}

	public static function tearDownAfterClass() {
//		parent::tearDownAfterClass();
//
//		codecept_debug('teardown after class');
//		putenv( "TEC_TICKETS_COMMERCE" );
//		tribe_update_option( 'tickets_commerce_enabled', false );

		// Enable Tribe Commerce.
		add_filter( 'tribe_tickets_commerce_paypal_is_active', '__return_true' );
		add_filter( 'tribe_tickets_get_modules', function ( $modules ) {
			/** @var \Tribe__Tickets__Commerce__PayPal__Main $paypal */
			$paypal = tribe( 'tickets.commerce.paypal' );

			$modules['Tribe__Tickets__Commerce__PayPal__Main'] = $paypal->plugin_name;

			codecept_debug( $modules);
			return $modules;
		} );
	}

//	public function setUp() {
//		codecept_debug( 'getting option : ' );
//		codecept_debug( intval( tribe_get_option( 'tickets_commerce_enabled' ) ) );
//
//		add_filter( 'tribe_tickets_ticket_object_is_ticket_cache_enabled', '__return_false' );
//		add_action( 'plugins_loaded', function(){
//			codecept_debug( 'init fired' );
//			add_filter( 'tec_tickets_commerce_is_enabled', function( $a ) {
//				codecept_debug( 'I was not called' );
//				return true;
//			}, 1, 1 );
//		} );
//		tribe_register_provider( Provider::class );
//
//		tribe_register_provider( Provider::class );

//		add_filter( 'tribe_tickets_ticket_object_is_ticket_cache_enabled', '__return_false' );
//		parent::setUp();
//	}

	public function test_if_provider_is_loaded() {
		$provider = tribe( Module::class );

		$this->assertNotFalse( $provider );
	}

	public function test_if_tickets_can_be_created_and_purchased() {

		$maker = new Event();
		$event_id = $maker->create();

		// create ticket with default capacity of 100.
		$ticket_a_id = $this->create_tc_ticket( $event_id, 10 );

		// get the ticket.
		$ticket = tribe( Module::class )->get_ticket( $event_id, $ticket_a_id );

		$this->assertEquals( 100, $ticket->capacity(), 'Ticket capacity should be 100' );
		$this->assertEquals( 100, $ticket->available(), 'Ticket availability should be 100' );

		// create order.
		$cart = new Cart();
		$cart->get_repository()->add_item( $ticket_a_id, 5 );

		$order     = tribe( Order::class )->create_from_cart( tribe( Gateway::class ) );
		$completed = tribe( Order::class )->modify_status( $order->ID, Pending::SLUG );

		// refresh ticket.
		$ticket = tribe( Module::class )->get_ticket( $event_id, $ticket_a_id );

		$this->assertEquals( 95, $ticket->available(), 'Ticket availability should be 95 after purchasing 5' );
	}

	public function test_purchasing_over_capacity() {
		$maker = new Event();
		$event_id = $maker->create();

		// create ticket with default capacity of 100.
		$ticket_a_id = $this->create_tc_ticket( $event_id, 10 );

		// get the ticket.
		$ticket = tribe( Module::class )->get_ticket( $event_id, $ticket_a_id );

		$this->assertEquals( 100, $ticket->capacity(), 'Ticket capacity should be 100' );
		$this->assertEquals( 100, $ticket->available(), 'Ticket availability should be 100' );

		//order data.
		$data['tickets'] = [
			[ 'ticket_id' => $ticket_a_id, 'quantity' => 200, 'obj' => $ticket ]
		];

		// try creating order.
		$cart = new Cart();
		$should_be_errors = $cart->get_repository()->process( $data );

		$this->assertIsArray( $should_be_errors );

		/**
		 * @var \WP_Error $error_a
		 */
		$error_a = $should_be_errors[0];

		$this->assertWPError( $error_a );
		$this->assertEquals( 'ticket-capacity-not-available', $error_a->get_error_code() );
	}
}